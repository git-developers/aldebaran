<?php

namespace MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    public function findAllOrderAsc()
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT event
            FROM MainBundle:Event event
            WHERE
            event.status = :status
            ORDER BY event.idIncrement ASC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);

        return $query->getResult();
    }

    public function findAllOrderDesc()
    {
        //(SELECT COUNT(t2.idIncrement) FROM MainBundle:EventHasForm t2 WHERE t2.event = t1) AS countForm
        $em = $this->getEntityManager();
        $dql = "
            SELECT
            t1, form
            FROM MainBundle:Event t1
            LEFT JOIN t1.form form
            WHERE
            t1.status = :status
            ORDER BY t1.idIncrement DESC
            ";


        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT event, form, element
            FROM MainBundle:Event event
            LEFT JOIN event.form form
            LEFT JOIN form.element element
            WHERE
            event.idIncrement = :id AND
            event.status = :status
            ORDER BY element.stackOrder, element.created ASC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findOneByUniqueId($uniqueId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT event
            FROM MainBundle:Event event
            WHERE
            event.uniqueId = :uniqueId AND
            event.status = :status
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('uniqueId', $uniqueId);

        return $query->getOneOrNullResult();
    }




    /**
     * INSERT UPDATE VALUES - TABLAS FISICAS POR FORMULARIO
     */
    public function insertUpdatePhysicalTable($saveEventForm, $event)
    {

        if(empty($saveEventForm)){
            return false;
        }

        foreach($saveEventForm as $formUniqueId => $elements){
            $physicalTable = $this->checkIfPhysicalTableExist($formUniqueId, $event);
            $tableName = $this->checkIfTableExist($formUniqueId);

            if((!is_null($tableName) && array_key_exists("table_name", $tableName))
                && (!is_null($physicalTable) && array_key_exists("id", $physicalTable))) {
                $this->update($elements, $formUniqueId, $event);
            }else if(!is_null($tableName) && array_key_exists("table_name", $tableName)){
                $this->insert($elements, $formUniqueId, $event);
            }else{
                return false;
            }
        }

        return true;
    }

    public function checkIfPhysicalTableExist($formUniqueId, $event)
    {
        try{
            $resultSetMap = new ResultSetMapping;
            $resultSetMap->addScalarResult('id_increment', 'id');
            $sqlQuery = "SELECT id_increment FROM form_$formUniqueId WHERE event_id = :eventId";
            $em = $this->getEntityManager();
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->setParameter('eventId', $event->getIdIncrement());
            return $query->getOneOrNullResult();
        }catch (\Exception $e){

        }
    }

    public function checkIfTableExist($formUniqueId)
    {

        $resultSetMap = new ResultSetMapping;
        $resultSetMap->addScalarResult('TABLE_NAME', 'table_name');
        $sqlQuery = "
                SELECT TABLE_NAME
                FROM information_schema.tables
                WHERE
                table_schema = :dbName AND
                table_name = :tableName
                ";

        $em = $this->getEntityManager();
        $dbName = $em->getConnection()->getDatabase();
        $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
        $query->setParameter('tableName', 'form_'.$formUniqueId);
        $query->setParameter('dbName', $dbName);
        //$query->useResultCache(true, 300, 'testcache');

        return $query->getOneOrNullResult();

    }

    private function update($elements, $formUniqueId, $event){

        try{
            $i = 1;
            $fields = "";

            foreach($elements as $key => $value){

                $coma = '';
                if(count($elements) > $i){
                    $coma = ',';
                }

                $fields .= $key."='".$value."'".$coma;
                $i++;
            }

            $resultSetMap = new ResultSetMapping;
            $sqlQuery = "UPDATE form_$formUniqueId SET $fields WHERE event_id = :eventId";
            $em = $this->getEntityManager();
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->setParameter('eventId', $event->getIdIncrement());
            $query->execute();

        }catch (\Exception $e){

        }
    }

    private function insert($elements, $formUniqueId, $event){

        try{

            $i = 1;
            $fields = "";
            $values = "";

            foreach($elements as $key => $value){

                $coma = '';
                if(count($elements) > $i){
                    $coma = ',';
                }

                $fields .= $key.$coma;
                $values .= "'".$value."'".$coma;
                $i++;
            }

            $fields = '(event_id,'.$fields.')';
            $values = "('".$event->getIdIncrement()."',".$values.')';

            $resultSetMap = new ResultSetMapping;
            $sqlQuery = "INSERT INTO form_$formUniqueId $fields VALUES $values";
            $em = $this->getEntityManager();
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->execute();

        }catch (\Exception $e){

        }
    }
    /**
     * INSERT UPDATE VALUES - TABLAS FISICAS POR FORMULARIO
     */





}
