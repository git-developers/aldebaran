<?php

namespace MainBundle\Repository;

use MainBundle\Entity\Event;
use MainBundle\Entity\Form;
use MainBundle\Entity\Element;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * FormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormRepository extends EntityRepository
{

    public function findAllOrderAsc()
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT form
            FROM MainBundle:Form form
            WHERE
            form.status = :status
            ORDER BY form.idIncrement ASC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);

        return $query->getResult();
    }

    public function findAllOrderDesc()
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT form
            FROM MainBundle:Form form
            WHERE
            form.status = :status
            ORDER BY form.idIncrement DESC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);

        return $query->getResult();
    }

    public function findOneById($id)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT form, element
            FROM MainBundle:Form form
            LEFT JOIN form.element element
            WHERE
            form.idIncrement = :id AND
            form.status = :status
            ORDER BY element.stackOrder, element.created ASC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('id', $id);

        return $query->getOneOrNullResult();
    }

    public function findOneByUniqueId($uniqueId)
    {
        $em = $this->getEntityManager();
        $dql = "
            SELECT form, element
            FROM MainBundle:Form form
            LEFT JOIN form.element element
            WHERE
            form.uniqueId = :uniqueId AND
            form.status = :status
            ORDER BY element.stackOrder, element.created ASC
            ";

        $query = $em->createQuery($dql);
        $query->setParameter('status', 1);
        $query->setParameter('uniqueId', $uniqueId);

        return $query->getOneOrNullResult();
    }

    public function findOneFromPhysicalTable(Event $event, Form $form, Element $element)
    {

        try {
            $formUniqueId = $form->getUniqueId();
            $field = $element->getTagName() . "_" . $element->getUniqueId();
            $resultSetMap = new ResultSetMapping;
            $resultSetMap->addScalarResult($field, 'field');
            $sqlQuery = "SELECT $field FROM form_$formUniqueId WHERE event_id = :eventId";
            $em = $this->getEntityManager();
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->setParameter('eventId', $event->getIdIncrement());
            return $query->getOneOrNullResult();
        }catch (\Exception $e){

        }
    }

    /**
     * CREAR TABLAS FISICAS POR FORMULARIO
     */
    public function createAlterPhysicalTable(Form $form)
    {

        try{
            $tableName = $this->checkIfTableExist($form);

            if(!is_null($tableName) && array_key_exists("table_name", $tableName)){
                $this->alterTable($form);
            }else{
                $this->createTable($form);
            }

        }catch (\Exception $e){

        }

    }

    public function checkIfTableExist(Form $form)
    {

        $resultSetMap = new ResultSetMapping;
        $resultSetMap->addScalarResult('TABLE_NAME', 'table_name');
        $sqlQuery = "
                SELECT TABLE_NAME
                FROM information_schema.tables
                WHERE
                table_schema = :dbName AND
                table_name = :tableName
                ";

        $em = $this->getEntityManager();
        $dbName = $em->getConnection()->getDatabase();
        $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
        $query->setParameter('tableName', 'form_'.$form->getUniqueId());
        $query->setParameter('dbName', $dbName);
        //$query->useResultCache(true, 300, 'testcache');

        return $query->getOneOrNullResult();

    }

    private function createTable(Form $form)
    {

        $formUniqueId = $form->getUniqueId();
        $resultSetMap = new ResultSetMapping;
        $sqlQuery = "
                CREATE TABLE IF NOT EXISTS form_$formUniqueId (
                id_increment INT(11) UNSIGNED AUTO_INCREMENT NOT NULL,
                created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                event_id int(11) DEFAULT NULL,
                ";

        foreach ($form->getElement() as $key => $element) {
            $sqlQuery .= $element->getTagName() . "_" . $element->getUniqueId() . " VARCHAR(150) NULL DEFAULT NULL,";
        }

        $sqlQuery .= "
                PRIMARY KEY (id_increment)
                )ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
                ";

        $em = $this->getEntityManager();
        $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
        $query->execute();



    }

    private function alterTable(Form $form)
    {
        $fieldsArray = $this->addMultipleColumns($form);
        $this->dropMultipleColumns($form, $fieldsArray);
    }

    private function addMultipleColumns(Form $form)
    {
        $resultSetMap = new ResultSetMapping;
        $em = $this->getEntityManager();

        $fieldsArray = [];
        foreach ($form->getElement() as $key => $element) {
            $field = $element->getTagName() . "_" . $element->getUniqueId();
            $fieldsArray[] = $field;
            $sqlQuery = "ALTER TABLE form_" . $form->getUniqueId() . " ADD COLUMN " . $field . " VARCHAR(150) NULL DEFAULT NULL";
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->execute();
        }

        return $fieldsArray;
    }

    public function addOneColumn($formUniqueId, Element $element)
    {
        $resultSetMap = new ResultSetMapping;
        $em = $this->getEntityManager();

        try {
            $field = $element->getTagName() . "_" . $element->getUniqueId();
            $sqlQuery = "ALTER TABLE form_" . $formUniqueId . " ADD COLUMN " . $field . " VARCHAR(150) NULL DEFAULT NULL";
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->execute();
        }catch (\Exception $e){

        }

    }

    private function dropMultipleColumns(Form $form, $fieldsArray)
    {
        $resultSetMap = new ResultSetMapping;
        $em = $this->getEntityManager();

        $columns = $this->findAllColumns('form_'.$form->getUniqueId());
        foreach ($columns as $key => $value) {
            if (!in_array($value['column'], $fieldsArray)) {
                $sqlQuery = "ALTER TABLE form_".$form->getUniqueId()." DROP COLUMN ".$value['column'];
                $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
                $query->execute();
            }
        }
    }

    public function dropOneColumn($formUniqueId, Element $element)
    {
        $resultSetMap = new ResultSetMapping;
        $em = $this->getEntityManager();

        try {
            $field = $element->getTagName() . "_" . $element->getUniqueId();
            $sqlQuery = "ALTER TABLE form_".$formUniqueId." DROP COLUMN ".$field;
            $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
            $query->execute();
        }catch (\Exception $e){

        }
    }

    private function findAllColumns($tableName)
    {
        $resultSetMap = new ResultSetMapping;
        $resultSetMap->addScalarResult('COLUMN_NAME', 'column');
        $sqlQuery = "
                    SELECT COLUMN_NAME
                    FROM information_schema.columns
                    WHERE
                    table_schema = :dbName AND
                    table_name = :tableName AND
                    COLUMN_NAME <> 'id_increment' AND
                    COLUMN_NAME <> 'event_id' AND
                    COLUMN_NAME <> 'created'
                    ";

        $em = $this->getEntityManager();
        $dbName = $em->getConnection()->getDatabase();
        $query = $em->createNativeQuery($sqlQuery, $resultSetMap);
        $query->setParameter('tableName', $tableName);
        $query->setParameter('dbName', $dbName);
        //$query->useResultCache(true, 300, 'testcache');

        return $query->getResult();
    }
    /**
     * CREAR TABLAS FISICAS POR FORMULARIO
     */



}
